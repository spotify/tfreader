name: main
on: [push, pull_request]

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: generate cache key
        run: |
          shasum build.sbt \
          project/plugins.sbt \
          project/build.properties \
          project/Dependencies.scala > gha.cache.tmp
      - uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('gha.cache.tmp') }}
          restore-keys: |
            ${{ runner.os }}-sbt-
      - uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-ivy-${{ hashFiles('gha.cache.tmp') }}
          restore-keys: |
            ${{ runner.os }}-ivy-
      - uses: actions/cache@v1
        with:
          path: ~/.cache/coursier
          key: ${{ runner.os }}-coursier-${{ hashFiles('gha.cache.tmp') }}
          restore-keys: |
            ${{ runner.os }}-coursier-
      - uses: DeLaGuardo/setup-graalvm@2.0
        with:
          graalvm-version: "19.3.1.java11"
          architecture: x64
      - run: sbt scalafmtCheckAll scalafmtSbtCheck
  build:
    name: Build
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@master
      - name: generate cache key
        run: |
          shasum build.sbt \
          project/plugins.sbt \
          project/build.properties \
          project/Dependencies.scala > gha.cache.tmp
      - uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('gha.cache.tmp') }}
          restore-keys: |
            ${{ runner.os }}-sbt-
      - uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-ivy-${{ hashFiles('gha.cache.tmp') }}
          restore-keys: |
            ${{ runner.os }}-ivy-
      - uses: actions/cache@v1
        with:
          path: ~/.cache/coursier
          key: ${{ runner.os }}-coursier-${{ hashFiles('gha.cache.tmp') }}
          restore-keys: |
            ${{ runner.os }}-coursier-
      - uses: DeLaGuardo/setup-graalvm@2.0
        with:
          graalvm-version: "19.3.1.java11"
          architecture: x64
      - run: gu install native-image
      - run: sudo apt install protobuf-compiler
        if: runner.os == 'Linux'
      - run: brew install sbt protobuf
        if: runner.os == 'macOS'
      - run: sbt test graalvm-native-image:packageBin
      - run: |
          cd cli/target/graalvm-native-image/ 
          tar czf tfr-${{ runner.os }}.tar.gz tfr
      - uses: actions/upload-artifact@master
        with:
          name: tfr-${{ runner.os }}
          path: cli/target/graalvm-native-image/tfr-${{ runner.os }}.tar.gz
  release:
    name: Release
    runs-on: "ubuntu-latest"
    needs: [build, checks]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt
  publish:
    name: Publish
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    needs: [release]
    steps:
      - id: get_version
        run: |
          echo ${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
      - uses: actions/download-artifact@v1
        with:
          name: release_url
      - id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - uses: actions/download-artifact@v1
        with:
          name: tfr-${{ runner.os }}
      - id: upload-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: tfr-${{ runner.os }}/tfr-${{ runner.os }}.tar.gz
          asset_name: tfr-${{ steps.get_version.outputs.version }}-${{ runner.os }}.tar.gz
          asset_content_type: application/gzip
